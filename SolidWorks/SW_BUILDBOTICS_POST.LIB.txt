*-----------------------------------
:ATTRNAME=TOOL QT COMMENT
:ATTRTYPE=POST
:ATTREMARK=
:CODETYPE=FORMAT
:WORD_ADDRESS_BEF=
:MODAL=FALSE
:ATTREND
*-----------------------------------
:ATTRNAME=SEQ CONFIG
:ATTRTYPE=POST
:ATTRVTYPE=INTEGER
:ATTREMARK=Config. seq. numbers
:ATTREND
*----------------------------------------------------------
* Define OUTPUT CODE Attributes
*----------------------------------------------------------
:ATTRNAME=N
:ATTRTYPE=POST
:ATTRVTYPE=INTEGER
:ATTREMARK=Sequence number
:CODETYPE=SELECT_FORMAT
:ATTRCFUNC=CALC_REG_N(SEQ,MAX_SEQUENCE)
:VAR=SEQ_CONFIG
:SELECT=0
:WORD_ADDRESS_BEF=N
:VARB=SEQ
:LEFT_PLACES=4
:RIGHT_PLACES=0
:CANNOT_BE_LEADING
:MUST_BE_TRAILING
:CANNOT_BE_DECIMAL
:CANNOT_BE_SIGNED
:SELECT=1
:WORD_ADDRESS_BEF=N
:VARB=SEQ
:LEFT_PLACES=4
:RIGHT_PLACES=0
:MUST_BE_LEADING
:MUST_BE_TRAILING
:CANNOT_BE_DECIMAL
:CANNOT_BE_SIGNED
:SELECT=2
:WORD_ADDRESS_BEF=N
:VARB=SEQ
:LEFT_PLACES=3
:RIGHT_PLACES=0
:MUST_BE_LEADING
:MUST_BE_TRAILING
:CANNOT_BE_DECIMAL
:CANNOT_BE_SIGNED
:UNITFLAG=NON_CONVERT
:ATTREND
*-----------------------------------
:ATTRNAME=S
:ATTRTYPE=POST
:ATTRVTYPE=INTEGER
:ATTREMARK=Spindle RPM
:CODETYPE=FORMAT
:ATTRCFUNC=CALC_INT_REGISTER(S,MACH,OPR_SPEED,REG_S)
:WORD_ADDRESS_BEF=|S
:LEFT_PLACES=4
:RIGHT_PLACES=0
:CANNOT_BE_DECIMAL
:MUST_BE_TRAILING
:CANNOT_BE_SIGNED
:UNITFLAG=NON_CONVERT
:MODAL=YES
:ATTREND
*-----------------------------------
:ATTRNAME=T
:ATTRTYPE=POST
:ATTRVTYPE=INTEGER
:ATTREMARK=Tool Number
:CODETYPE=FORMAT
:ATTRCFUNC=CALC_INT_REGISTER(T,MACH,TOOL,REG_T2)
:WORD_ADDRESS_BEF=|T
:RIGHT_PLACES=0
:CANNOT_BE_DECIMAL
:CANNOT_BE_SIGNED
:UNITFLAG=NON_CONVERT
:ATTREND
*-----------------------------------
*----------------------------------------------------------
* Define OUTPUT CODE Attributes (G Codes...)
*----------------------------------------------------------
:ATTRNAME=G
:ATTRTYPE=POST
:ATTRVTYPE=INTEGER
:ATTREMARK=G Codes
:CODETYPE=FORMAT
:ATTRCFUNC=CALC_G_GROUP(G,GC,GG,GM,MACH,G_GROUP,ATTRIVALUE,INDEX)
:CODETYPE=FORMAT
:WORD_ADDRESS_BEF=|G
:RIGHT_PLACES=0
:CANNOT_BE_DECIMAL
:CANNOT_BE_SIGNED
:UNITFLAG=NON_CONVERT
:MODAL=YES
:ATTRUSED=1
:ATTREND
*----------------------------------------------------------
* Define OUTPUT CODE Attributes (M Codes...)
*----------------------------------------------------------
:ATTRNAME=M
:ATTRTYPE=POST
:ATTRVTYPE=INTEGER
:ATTREMARK=M Codes
:CODETYPE=FORMAT
:ATTRCFUNC=CALC_M_GROUP(M,MC,MG,MM,MACH,M_GROUP,ATTRIVALUE,INDEX)
:CODETYPE=FORMAT
:RIGHT_PLACES=0
:WORD_ADDRESS_BEF=|M
:CANNOT_BE_DECIMAL
:CANNOT_BE_SIGNED
:UNITFLAG=NON_CONVERT
:MODAL=YES
:ATTRUSED=1
:ATTREND
*----------------------------------------------------------
* Define OUTPUT CODE Attributes (Movement...)
*----------------------------------------------------------
:ATTRNAME=X
:ATTRTYPE=POST
:ATTRVTYPE=DECIMAL
:ATTREMARK=X End
:CODETYPE=FORMAT
:ATTRCFUNC=CALC_ENDPOINT(X,X_POS,GC,GG,G_GROUP,MACH,PREV,REG_X)
:WORD_ADDRESS_BEF=|X
:MODAL=YES
:ATTREND
*-----------------------------------
:ATTRNAME=Y
:ATTRTYPE=POST
:ATTRVTYPE=DECIMAL
:ATTREMARK=Y End
:CODETYPE=FORMAT
:ATTRCFUNC=CALC_ENDPOINT(Y,Y_POS,GC,GG,G_GROUP,MACH,PREV,REG_Y)
:WORD_ADDRESS_BEF=|Y
:MODAL=YES
:ATTREND
*-----------------------------------
:ATTRNAME=Z
:ATTRTYPE=POST
:ATTRVTYPE=DECIMAL
:ATTREMARK=Z End
:CODETYPE=FORMAT
:ATTRCFUNC=CALC_ENDPOINT(Z,ABS_Z_END,GC,GG,G_GROUP,MACH,PREV,REG_Z)
:WORD_ADDRESS_BEF=|Z
:MODAL=YES
:ATTREND
*-----------------------------------
:ATTRNAME=VI
:ATTRTYPE=POST
:ATTRVTYPE=DECIMAL
:ATTREMARK=I Vector
:CODETYPE=FORMAT
:ATTRCFUNC=CALC_ENDPOINT(VI,VECTOR_I,GC,GG,G_GROUP,MACH,PREV,REG_VI)
:WORD_ADDRESS_BEF=|I
:MODAL=YES
:ATTREND
*-----------------------------------
:ATTRNAME=VJ
:ATTRTYPE=POST
:ATTRVTYPE=DECIMAL
:ATTREMARK=J Vector
:CODETYPE=FORMAT
:ATTRCFUNC=CALC_ENDPOINT(VJ,VECTOR_J,GC,GG,G_GROUP,MACH,PREV,REG_VJ)
:WORD_ADDRESS_BEF=|J
:MODAL=YES
:ATTREND
*-----------------------------------
:ATTRNAME=VK
:ATTRTYPE=POST
:ATTRVTYPE=DECIMAL
:ATTREMARK=K Vector
:CODETYPE=FORMAT
:ATTRCFUNC=CALC_ENDPOINT(VK,VECTOR_K,GC,GG,G_GROUP,MACH,PREV,REG_VK)
:WORD_ADDRESS_BEF=|K
:MODAL=YES
:ATTREND
*-----------------------------------
:ATTRNAME=A
:ATTRTYPE=POST
:ATTRVTYPE=DECIMAL
:ATTREMARK=Angle A
:CODETYPE=FORMAT
:ATTRCFUNC=CALC_ROT_ANGLE_A(A,MACH,INC_ROT_TILT_A,REG_A)
:WORD_ADDRESS_BEF=|A
:WORD_ADDRESS_AFT=|
:MODAL=YES
:UNITFLAG=NON_CONVERT
:ATTREND
*-----------------------------------
:ATTRNAME=B
:ATTRTYPE=POST
:ATTRVTYPE=DECIMAL
:ATTREMARK=Angle B
:CODETYPE=FORMAT
:ATTRCFUNC=CALC_ROT_ANGLE_B(B,MACH,INC_ROT_TILT_B,REG_B)
:WORD_ADDRESS_BEF=|B
:WORD_ADDRESS_AFT=|
:MODAL=YES
:UNITFLAG=NON_CONVERT
:ATTREND
*-----------------------------------
:ATTRNAME=X OFFSET
:ATTRTYPE=POST
:ATTRVTYPE=DECIMAL
:ATTREMARK=X End
:CODETYPE=FORMAT
:ATTRCFUNC=CALC_MACRO_ORIGIN(X_OFFSET,REG_X,X_OFFSET)
:WORD_ADDRESS_BEF=|X
:ATTREND
*-----------------------------------
:ATTRNAME=Y OFFSET
:ATTRTYPE=POST
:ATTRVTYPE=DECIMAL
:ATTREMARK=Y End
:CODETYPE=FORMAT
:ATTRCFUNC=CALC_MACRO_ORIGIN(Y_OFFSET,REG_Y,Y_OFFSET)
:WORD_ADDRESS_BEF=|Y
:ATTREND
*-----------------------------------
:ATTRNAME=Z CLEAR
:ATTRTYPE=POST
:ATTRVTYPE=DECIMAL
:ATTREMARK=X End
:CODETYPE=FORMAT
:ATTRCFUNC=CALC_DEC_REGISTER(Z_CLEAR,MACH,OPR_Z_CLEARANCE,REG_Z)
:WORD_ADDRESS_BEF=|R
:MODAL=NO
:ATTREND
*-----------------------------------
:ATTRNAME=Z DEPTH
:ATTRTYPE=POST
:ATTRVTYPE=DECIMAL
:ATTREMARK=X End
:CODETYPE=FORMAT
:ATTRCFUNC=CALC_DEC_REGISTER(Z_DEPTH,MACH,OPR_Z_DEPTH,REG_Z)
:WORD_ADDRESS_BEF=|Z
:MODAL=NO
:ATTREND
*-----------------------------------
:ATTRNAME=SUB PECK
:ATTRTYPE=POST
:ATTRVTYPE=DECIMAL
:ATTREMARK=X End
:CODETYPE=FORMAT
:ATTRCFUNC=CALC_DEC_REGISTER(SUB_PECK,MACH,OPR_Z_SUB_PECK,REG_Q)
:WORD_ADDRESS_BEF=|Q
:MODAL=NO
:ATTREND
*-----------------------------------
:ATTRNAME=I
:ATTRTYPE=POST
:ATTRVTYPE=DECIMAL
:ATTREMARK=X Center
:CODETYPE=FORMAT
:ATTRCFUNC=CALC_CENTER(I,ABS_I_CENTER,GC,GG,G_GROUP,MACH,PREV,REG_X,REG_I,AIC)
:WORD_ADDRESS_BEF=|I
:ATTREND
*-----------------------------------
:ATTRNAME=J
:ATTRTYPE=POST
:ATTRVTYPE=DECIMAL
:ATTREMARK=J Center
:CODETYPE=FORMAT
:ATTRCFUNC=CALC_CENTER(J,ABS_J_CENTER,GC,GG,G_GROUP,MACH,PREV,REG_Y,REG_J,AIC)
:WORD_ADDRESS_BEF=|J
:ATTREND
*-----------------------------------
:ATTRNAME=R
:ATTRTYPE=POST
:ATTRVTYPE=DECIMAL
:ATTREMARK=R Radius
:CODETYPE=FORMAT
:ATTRCFUNC=CALC_RADIUS(R,MACH,REG_R)
:WORD_ADDRESS_BEF=|R
:MODAL=YES
:ATTREND
*-----------------------------------
:ATTRNAME=F
:ATTRTYPE=POST
:ATTRVTYPE=DECIMAL
:ATTREMARK=Feedrate IPM/MPM
:CODETYPE=FORMAT
:ATTRCFUNC=CALC_REG_F(MACH,REG_F,F)
:WORD_ADDRESS_BEF=|F
:CANNOT_BE_SIGNED
:MODAL=YES
:ATTREND
*-----------------------------------
:ATTRNAME=MACRO NAME
:ATTRTYPE=POST
:ATTREMARK=
:CODETYPE=FORMAT
:WORD_ADDRESS_BEF=|(
:VAR=MACRO NAME
:WORD_ADDRESS_AFT=)
:LEFT_PLACES=0
:RIGHT_PLACES=0
:UNITFLAG=NON_CONVERT
:ATTRSPACES=YES
*:MODAL=YES
:ATTRUSED=1
:ATTREND
*-----------------------------------
:ATTRNAME=CURRENT MACRO NAME
:ATTRTYPE=POST
:ATTREMARK=
:CODETYPE=FORMAT
:WORD_ADDRESS_BEF=|(
:VAR=CURRENT MACRO NAME
:WORD_ADDRESS_AFT=)
:LEFT_PLACES=0
:RIGHT_PLACES=0
:UNITFLAG=NON_CONVERT
:ATTRSPACES=YES
*:MODAL=YES
:ATTRUSED=1
:ATTREND
*****
****
:SECTION=CALC_START_DRILL_CYCLE
:C: TOTAL_Z_FEED=0
:C: TOTAL_Z_RAPID=0
:C: IF SECTIONEXIST(MACRO_RAPID_CALL_MILL) THEN
:C: CALL(CALC_START_DRILL_CYCLE_MACRO)
:C: RETURN
:C: ENDIF
:C: IF OPR_RETRACT_TYPE=CLEARANCE_PLANE THEN Z_POS=OPR_Z_CLEARANCE ENDIF
:C: IF OPR_RETRACT_TYPE=RAPID_PLANE THEN Z_POS=OPR_Z_RAPID_PLANE ENDIF
:C: IF SECTIONEXIST(DRILL_POSITION) THEN
:C: CALL(CALC_DRILL_POSITION)
:C: ELSE
:C: Z_SAVE=ABS_Z_END
:C: ABS_Z_END=Z_POS
:C: CALL(CALC_RAPID_MOVE_MILL)
:C: ABS_Z_END=Z_SAVE
:C: ENDIF
:C: FORCE_XY=0
:C: SAVE_Z=ABS_Z_END ABS_Z_END=Z_POS
:C: IF GC(G_LEN_COMP)<>GC(G_LEN_CANCEL) THEN
:C:  IF MACH(REG_Z)=MILL_Z_HOME THEN
:C:    IF SECTIONEXIST(FIRST_RAPID_Z_PRELOAD_DOWN_MILL) THEN
:C:    CALL(CALC_FIRST_RAPID_Z_PRELOAD_DOWN_MILL)
:C:    ELSE
:C:    CALL(CALC_FIRST_RAPID_Z_MOVE_DOWN_MILL)
:C:    ENDIF
:C:  ELSE
:C:  CALL(RAPID_Z_MOVE_DOWN_MILL)
:C:  ENDIF
:C: ENDIF
:C: ABS_Z_END=SAVE_Z
:C: IF OPR_DRILL_CYCLE_TYPE=DRILLING THEN
:C: CALL(CALC_DRILLING_CYCLE)
:C: GOTO10
:C: ENDIF
:C: IF OPR_DRILL_CYCLE_TYPE=SPOT_DRILLING THEN
:C: CALL(CALC_SPOT_DRILLING_CYCLE)
:C: GOTO10
:C: ENDIF
:C: IF OPR_DRILL_CYCLE_TYPE=PECKING THEN
* this will force it to use drill cycle always
:C: CALL(CALC_DRILLING_CYCLE)
* Comment out the next two lines and replace with above one
*:C: CALL(CALC_NUM_PECKS)
*:C: CALL(CALC_PECKING_CYCLE)
:C: GOTO10
:C: ENDIF
:C: IF OPR_DRILL_CYCLE_TYPE=HIGH_SPEED_PECKING THEN
* this will force it to use drill cycle always
:C: CALL(CALC_DRILLING_CYCLE)
* Comment out the next two lines and replace with above one
*:C: CALL(CALC_NUM_PECKS)
*:C: CALL(CALC_HIGH_SPEED_PECKING_CYCLE)
:C: GOTO10
:C: ENDIF
:C: IF OPR_DRILL_CYCLE_TYPE=VARIABLE_PECKING THEN
* this will force it to use drill cycle always
:C: CALL(CALC_DRILLING_CYCLE)
* Comment out the next two lines and replace with above one
*:C: CALL(CALC_NUM_PECKS)
*:C: CALL(CALC_VARIABLE_PECKING_CYCLE)
:C: GOTO10
:C: ENDIF
:C: IF OPR_DRILL_CYCLE_TYPE=TAPPING THEN
:C: CALL(CALC_TAPPING_CYCLE)
:C: GOTO10
:C: ENDIF
:C: IF OPR_DRILL_CYCLE_TYPE=REVERSE_TAPPING THEN
:C: CALL(CALC_REVERSE_TAPPING_CYCLE)
:C: GOTO10
:C: ENDIF
:C: IF OPR_DRILL_CYCLE_TYPE=FINE_BORING THEN
:C: CALL(CALC_FINE_BORING_CYCLE)
:C: GOTO10
:C: ENDIF
:C: IF OPR_DRILL_CYCLE_TYPE=REAMING THEN
:C: CALL(CALC_REAMING_CYCLE)
:C: GOTO10
:C: ENDIF
:C: IF OPR_DRILL_CYCLE_TYPE=REAMING_DWELL THEN
:C: CALL(CALC_REAM_DWELL_CYCLE)
:C: GOTO10
:C: ENDIF
:C: IF OPR_DRILL_CYCLE_TYPE=BORING THEN
:C: CALL(CALC_BORING_CYCLE)
:C: GOTO10
:C: ENDIF
:C: IF OPR_DRILL_CYCLE_TYPE=BORE_DWELL THEN
:C: CALL(CALC_BORE_DWELL_CYCLE)
:C: GOTO10
:C: ENDIF
:C: IF OPR_DRILL_CYCLE_TYPE=BACK_BORING THEN
:C: CALL(CALC_BACK_BORING_CYCLE)
:C: GOTO10
:C: ENDIF
*
*    Time Calculations
*
:C10: Z_DISTANCE=TOTAL_Z_RAPID
:C: IF SECTIONEXIST(OUTPUT_ESTIMATED_TIME) THEN
:C: CALL(CALC_ESTIMATE_RAPID_TIME)
:C: CALL(CALC_ESTIMATE_DRILL_Z_INIT_TIME)
:C: Z_DISTANCE=TOTAL_Z_RAPID
:C: CALL(CALC_ESTIMATE_DRILL_RAPID_TIME)
:C: Z_DISTANCE=TOTAL_Z_FEED
:C: CALL(CALC_ESTIMATE_DRILL_FEED_TIME)
:C: ENDIF
*
*















































































